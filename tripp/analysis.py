"""
    @release_date  : $release_date
    @version       : $release_version
    @author        : Christos Matsingos, Ka Fu Man 
    
    This file is part of the TrIPP software
    (https://github.com/fornililab/TrIPP).
    Copyright (c) 2024 Christos Matsingos, Ka Fu Man and Arianna Fornili.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>.
"""

import pandas as pd 
from tripp._model_pka_values_ import model_pka_values 
import numpy as np
from scipy import stats


def calculate_difference_to_model(input_directory, pka_csv_prefix):
    """Calculate the time evolution differece of the pKa value to 
    the model value from PROPKA.

    Parameters
    ----------
    output_directory: str
        The directory you want to save the output CSV file.
        
    output_prefix: str
        Prefix of the output CSV file.
    
    """
    df_pka = pd.read_csv(f'{input_directory}/{pka_csv_prefix}.csv')

    df_dif = pd.DataFrame()
    df_dif['Time [ps]'] = df_pka['Time [ps]']
    del df_pka['Time [ps]']
    residues = np.array(df_pka.columns)
    for residue in residues:
        if 'N+' in residue:
            residue_modified = residue.replace('N+', 'NTR')
        elif 'C-' in residue:
            residue_modified = residue.replace('C-', 'CTR')
        else:
            residue_modified = residue

        amino_acid = residue_modified[:3]
        model_value = model_pka_values[amino_acid]
        residue_data = np.around(df_pka[residue].to_numpy() - model_value, decimals=3)
        df_dif[residue] = residue_data

    df_dif.to_csv(f'{input_directory}/{pka_csv_prefix}_difference_to_model.csv', index=False)


def PCProjectionScreening(output_directory,
                          output_prefix,
                          pka_file,
                          projection_file,
                          method='Pearson',
                          start=0,
                          end=-1):
    """Automatically screen the projection (provided by the user) 
    with the pKa of the ionisable residues.
    
    Parameters
    ----------

    output_filename: str
        The name of the output.

    pka_file: str
        The file path for the CSV file of the pKa values generated by the 
        Trajectory class.

    projection_file: str
        The file path for the CSV file of the projections values. The CSV contains 
        one column of time and the other column of projection value separated by 
        comma. See example format in tutorial/files/1AKI_md1_pc1.csv

    method: str
        'Pearson' or 'Spearman' correlation can be computed.
        
    start: int
        Start time in ps for the projection screening.
        Default is 0, which means the start of the trajectory.
    end: int
        End time in ps for the projection screening.
        Default is -1, which means the end of the trajectory.

    """
    pKaDF = pd.read_csv(pka_file)
    if end == -1:
        end = pKaDF['Time [ps]'].iloc[end]
    else:
        end = end
    pKaDF = pKaDF[(pKaDF['Time [ps]'] >= start) & (pKaDF['Time [ps]'] <= end)]
    ProjDF = pd.read_csv(projection_file,
                         sep=',',
                         names=['Time', 'Projection'])
    Correlations = []
    PValues = []
    for Residue in pKaDF.keys()[1:]:
        if method == 'Pearson':
            Correlation, PValue = stats.pearsonr(ProjDF['Projection'], pKaDF[Residue])
        elif method == 'Spearman':
            Correlation, PValue = stats.spearmanr(ProjDF['Projection'], pKaDF[Residue])
        Correlations.append(Correlation)
        PValues.append(PValue)
    OutputDF = pd.DataFrame([pKaDF.keys()[1:], Correlations, PValues]).T
    OutputDF.columns = ['Residue', 'Correlation', 'P-value']
    OutputDF.to_csv(f'{output_directory}/{output_prefix}.csv', index=False)
